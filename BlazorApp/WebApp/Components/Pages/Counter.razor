@page "/counter"
@rendermode InteractiveServer
@using System.Text.Json
@using WebApp.Helpers
@inject LocalStorageService LocalStorage

<PageTitle>RssFeed</PageTitle>

<input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Search articles..." />

<div class="grid-articles">
    @if (filteredArticles.Any())
    {
        foreach (var article in filteredArticles)
        {
            <a href="@article.LinkToArticle">
                <div class="grid-articleCard">
                    <div id="image"> <img src="@article.Media?.Url" alt="404"> </div>
                    <div id="title" class="article-card-text small">
                        <h1>@article.Title</h1></div>
                    <div id="description" class="article-card-text smaller justify">
                        <p>@article.Description</p></div>
                    <div id="bottom-row" class="article-card-text small">
                        <div id="author">Author: @article.Author</div>
                        <div id="pub-date">Published: @article.pubDate</div>
                    </div>
                </div>
            </a>
        }
    }
</div>

@code {

    private List<string> items = new List<string>();
    private bool isInitialized = false;
    private string searchTerm = string.Empty;
    private ArticlesObj _articlesObj = new ArticlesObj { Articles = new List<Article>() };
    
    
    private IEnumerable<Article> filteredArticles => string.IsNullOrWhiteSpace(searchTerm)
        ? _articlesObj.Articles
        : _articlesObj.Articles.Where(article =>
            article.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            article.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            article.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var storedItems = await LocalStorage.GetItem("items");
        if (storedItems != null)
        {
            items = JsonSerializer.Deserialize<List<string>>(storedItems);
        }
        else
        {
            items.Add("https://flipboard.com/@raimoseero/feed-nii8kd0sz.rss");
            await LocalStorage.AddLink("items", JsonSerializer.Serialize(items));
        }
        _articlesObj = await GetXmlData(items);
        StateHasChanged();

    }
    
    private static async Task<ArticlesObj> GetXmlData(List<string> items)
    {
        HttpClient client = new HttpClient();
        var result = new ArticlesObj { Articles = new List<Article>() };

        try
        {
            foreach (var url in items)
            {
                string xmlData = await client.GetStringAsync(url);
                var articlesObj = XMLDeserializer.DeserializeXmlData<ArticlesObj>(xmlData);
                if (articlesObj != null && articlesObj.Articles != null)
                {
                    result.Articles = result.Articles.Concat(articlesObj.Articles).ToList();
                }
            }
            return result;
        }
        catch (Exception ex)
        {
            // Log or handle the exception as needed
            throw new Exception("Error fetching XML data", ex);
        }
    }
}